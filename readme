Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Nicole Deng

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

- The course's lectures
- The course's precepts
- The course's website
- Documents that are referenced directly by the course's website. 
  Such documents include the course's lecture slides and precept 
  handouts.
------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None
------------------------------------------------------------------------
In fulfillment of the requirement from section 2.4.3 of the Academic
Regulations in Princeton's Rights, Rules, Responsibilities guide,
enter your name in the space below the following affirmation:

This paper represents my own work in accordance with University
regulations.

Nicole Deng
------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

I thought that this assigment was quite helpful in better understanding 
symbol tables and data structures. Through implementing it in two 
different ways, I better understand how linked lists and hash tables 
are used and can see their differing efficiencies. I did find it fun
to test and compare the CPU times of the different implementations. 

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None
------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

  symtablelist.c: line 62: medium priority:
  Do you want to validate 'pvValue' through an assert?

  I disagree with this warning because as a void pointer, pvValue may be 
  NULL in some cases, such as for empty or unitialized values. Thus, it 
  is too restrictive to assert pvValue as non-NULL. 

  symtablelist.c: line 95: medium priority:
  Do you want to validate 'pvValue' through an assert?

  I disagree with this warning for the same reasons as the previous 
  warning. pvValue can be NULL, thus it is too restrictive to assert it
  as non-NULL. 

  symtablelist.c: line 183: medium priority:
  Do you want to validate 'pvExtra' through an assert?

  I disagree with this warning because pvExtra may be NULL in some cases,
  such as for additional callback arguments. Thus, it is too restrictive
  too assert pvExtra as non-NULL.
------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None
------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

  symtablehash.c: line 135: medium priority:
  Do you want to validate 'pvValue' through an assert?

  I disagree with this warning because as a void pointer, pvValue may be 
  NULL in some cases, such as for empty or unitialized values. Thus, it 
  is too restrictive to assert pvValue as non-NULL.

  symtablehash.c: line 174: medium priority:
  Do you want to validate 'pvValue' through an assert?

  I disagree with this warning for the same reasons as the previous 
  warning. pvValue can be NULL, thus it is too restrictive to assert it
  as non-NULL

  symtablehash.c: line 266: medium priority:
  Do you want to validate 'pvExtra' through an assert?

  I disagree with this warning because pvExtra may be NULL in some cases,
  such as for additional callback arguments. Thus, it is too restrictive
  too assert pvExtra as non-NULL.
------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0 seconds.
-- 500 bindings consumed 0.001689 seconds.
-- 5000 bindings consumed 1.077046 seconds.
-- 50000 bindings consumed 109.098616 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0 seconds.
-- 500 bindings consumed 0 seconds.
-- 5000 bindings consumed 0.006541 seconds.
-- 50000 bindings consumed 0.418550 seconds.
-- 500000 bindings consumed 78.218580 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0 seconds.
-- 500 bindings consumed 0 seconds.
-- 5000 bindings consumed 0.012143 seconds.
-- 50000 bindings consumed 0.137612 seconds.
-- 500000 bindings consumed 1.810878 seconds.
